lambda <- 0.2
n <- 40
# Generate the random variables for these n values
par(mfrow = c(2,2))
for (no_sim in c(10, 100, 1000, 10000)){
meanValue <- NULL
meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue  <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
myhist <- hist(meanValue, freq = TRUE, xlim = c(2, 8), xlab = "Values",
main = paste(no_sim, "simulations"),col="light yellow")
}
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
# Total mean and sD of the aggregated samples
avg <- mean(meanValue)
s <- sd(meanValue)
# Average value from the data set
abline(v = avg , col = "red", lwd = 3, lty = 2)
# Expected value of an exponential distribution
abline(v = 5, col = "purple", lwd = 3, lty = 9)
# Theoretical normal distribution for the data set
x <- seq(min(meanValue), max(meanValue), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('purple', 'red', "grey"), bty='n', cex=.75)
sd(meanValue)
qqnorm(meanValue, col = "purple")
qqline(meanValue)
# For no_sim <- 100
no_sim <- 100
meanValue<- NULL; meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
# 95% confidence interval for each simulation
upper <- meanValue +  1.96 * (meanSD/sqrt(n))
lower <- meanValue -  1.96 * (meanSD/sqrt(n))
sum(lower < 5 & 5 < upper)/no_sim * 100
index <- c(1:no_sim)
plot(index, upper, ylim = c(0, 10), type = "n", xlab = "Index", ylab = "Mean",
main = "Plot of confidence interval coverage for 100 simulations",col="purple")
segments(index, upper, index, lower, col = "purple", lwd = 3)
text(-8, 5, expression(paste("", mu, "")), cex = 1.5)
ablineclip(h=5, x1 = -2.5, lty = 2, col="red")
# Remove all current data in workspace:
rm(list=ls())
# Remove all current data in workspace:
rm(list=ls())
library(ggplot2)
# data(ToothGrowth)
summary(ToothGrowth)
dose <- ToothGrowth$dose
supp <- ToothGrowth$supp
len <- ToothGrowth$len
# Load the ToothGrowth data and perform some basic exploratory data analyses
# Provide a basic summary of the data.
# Use confidence intervals and hypothesis tests to compare tooth growth by supp and dose.
# State your conclusions and the assumptions needed for your conclusions.
par(mfrow = c(1,2))
f1<-ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ supp)+
theme_classic()
f2<-ggplot(ToothGrowth, aes(x = factor(supp), y = len, fill = factor(supp)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ dose)+
theme_classic()
# calculate the mean and sd of each dosage and supplement
dosages_means <- aggregate(ToothGrowth$len, by = list(ToothGrowth$dose), FUN = mean)
dosages_sds <- aggregate(ToothGrowth$len, by = list(ToothGrowth$dose), FUN = sd)
Supplements_means <- aggregate(ToothGrowth$len, by = list(ToothGrowth$supp), FUN = mean)
Supplements_sds <- aggregate(ToothGrowth$len, by = list(ToothGrowth$supp), FUN = sd)
# split the data up by dosages
d0.5 <- subset(ToothGrowth, dose == 0.5)
d1.0 <- subset(ToothGrowth, dose == 1.0)
d2.0 <- subset(ToothGrowth, dose == 2.0)
# conduct a t test between supplements
test0.5 <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d0.5)
test0.5$p.value; test0.5$conf
test1.0 <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d1.0)
test1.0$p.value; test1.0$conf
test2.0 <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d2.0)
test2.0$p.value; test2.0$conf
library(knitr)
library(plotrix)
# Set up the experiment values
set.seed(1230)
par(xpd=NA)
lambda <- 0.2
n <- 40
# Generate the random variables for these n values
par(mfrow = c(2,2))
for (no_sim in c(10, 100, 1000, 10000)){
meanValue <- NULL
meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue  <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
myhist <- hist(meanValue, freq = TRUE, xlim = c(2, 8), xlab = "Values",
main = paste(no_sim, "simulations"),col="light yellow")
}
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
# Total mean and sD of the aggregated samples
avg <- mean(meanValue)
s <- sd(meanValue)
# Average value from the data set
abline(v = avg , col = "red", lwd = 3, lty = 2)
# Expected value of an exponential distribution
abline(v = 5, col = "purple", lwd = 3, lty = 9)
# Theoretical normal distribution for the data set
x <- seq(min(meanValue), max(meanValue), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('purple', 'red', "grey"), bty='n', cex=.75)
sd(meanValue)
qqnorm(meanValue, col = "purple")
qqline(meanValue)
# For no_sim <- 100
no_sim <- 100
meanValue<- NULL; meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
# 95% confidence interval for each simulation
upper <- meanValue +  1.96 * (meanSD/sqrt(n))
lower <- meanValue -  1.96 * (meanSD/sqrt(n))
sum(lower < 5 & 5 < upper)/no_sim * 100
index <- c(1:no_sim)
plot(index, upper, ylim = c(0, 10), type = "n", xlab = "Index", ylab = "Mean",
main = "Plot of confidence interval coverage for 100 simulations",col="purple")
segments(index, upper, index, lower, col = "purple", lwd = 3)
text(-8, 5, expression(paste("", mu, "")), cex = 1.5)
ablineclip(h=5, x1 = -2.5, lty = 2, col="red")
rm(list=ls())
library(knitr)
library(plotrix)
# Set up the experiment values
set.seed(1230)
par(xpd=NA)
lambda <- 0.2
n <- 40
# Total mean and sD of the aggregated samples
avg <- mean(meanValue)
s <- sd(meanValue)
# Average value from the data set
abline(v = avg , col = "red", lwd = 3, lty = 2)
# Expected value of an exponential distribution
abline(v = 5, col = "purple", lwd = 3, lty = 9)
# Theoretical normal distribution for the data set
x <- seq(min(meanValue), max(meanValue), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('purple', 'red', "grey"), bty='n', cex=.75)
# Generate the random variables for these n values
par(mfrow = c(2,2))
for (no_sim in c(10, 100, 1000, 10000)){
meanValue <- NULL
meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue  <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
myhist <- hist(meanValue, freq = TRUE, xlim = c(2, 8), xlab = "Values",
main = paste(no_sim, "simulations"),col="light yellow")
}
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
# Total mean and sD of the aggregated samples
avg <- mean(meanValue)
s <- sd(meanValue)
# Average value from the data set
abline(v = avg , col = "red", lwd = 3, lty = 2)
# Expected value of an exponential distribution
abline(v = 5, col = "purple", lwd = 3, lty = 9)
# Theoretical normal distribution for the data set
x <- seq(min(meanValue), max(meanValue), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('purple', 'red', "grey"), bty='n', cex=.75)
sd(meanValue)
qqnorm(meanValue, col = "purple")
qqline(meanValue)
sd(meanValue)
qqnorm(meanValue, col = "purple")
qqline(meanValue)
# For no_sim <- 100
no_sim <- 100
meanValue<- NULL; meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
# 95% confidence interval for each simulation
upper <- meanValue +  1.96 * (meanSD/sqrt(n))
lower <- meanValue -  1.96 * (meanSD/sqrt(n))
sum(lower < 5 & 5 < upper)/no_sim * 100
index <- c(1:no_sim)
plot(index, upper, ylim = c(0, 10), type = "n", xlab = "Index", ylab = "Mean",
main = "Plot of confidence interval coverage for 100 simulations",col="purple")
segments(index, upper, index, lower, col = "purple", lwd = 3)
text(-8, 5, expression(paste("", mu, "")), cex = 1.5)
ablineclip(h=5, x1 = -2.5, lty = 2, col="red")
sd(meanValue)
qqnorm(meanValue, col = "purple")
qqline(meanValue)
rm(list=ls())
library(knitr)
library(plotrix)
# Set up the experiment values
set.seed(1230)
par(xpd=NA)
lambda <- 0.2
n <- 40
# Generate the random variables for these n values
par(mfrow = c(2,2))
for (no_sim in c(10, 100, 1000, 10000)){
meanValue <- NULL
meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue  <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
myhist <- hist(meanValue, freq = TRUE, xlim = c(2, 8), xlab = "Values",
main = paste(no_sim, "simulations"),col="light yellow")
}
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
# Total mean and sD of the aggregated samples
avg <- mean(meanValue)
s <- sd(meanValue)
# Average value from the data set
abline(v = avg , col = "red", lwd = 3, lty = 2)
# Expected value of an exponential distribution
abline(v = 5, col = "purple", lwd = 3, lty = 9)
# Theoretical normal distribution for the data set
x <- seq(min(meanValue), max(meanValue), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('purple', 'red', "grey"), bty='n', cex=.75)
sd(meanValue)
qqnorm(meanValue, col = "purple")
qqline(meanValue)
avg
s
rm(list=ls())
rm(list=ls())
library(knitr)
library(plotrix)
# Set up the experiment values
set.seed(1230)
par(xpd=NA)
lambda <- 0.2
n <- 40
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
for (no_sim in c(10, 100, 1000, 10000)){
meanValue <- NULL
meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue  <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
for (no_sim in c(10, 100, 1000, 10000)){
meanValue <- NULL
meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue  <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
}
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
qqline(meanValue,main="QQ plot")
rm(list=ls())
}
rm(list=ls())
library(knitr)
library(plotrix)
# Set up the experiment values
set.seed(1230)
par(xpd=NA)
lambda <- 0.2
n <- 40
# Generate the random variables for these n values
par(mfrow = c(2,2))
for (no_sim in c(10, 100, 1000, 10000)){
meanValue <- NULL
meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue  <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
myhist <- hist(meanValue, freq = TRUE, xlim = c(2, 8), xlab = "Values",
main = paste(no_sim, "simulations"),col="light yellow")
}
# no_sim = 10,000 the histogram of probability density
par(mfrow = c(1,1))
myhist <- hist(meanValue, freq = FALSE, xlim = c(2, 8), xlab = "Values", ylim = c(0, .55),
breaks = 25, col="light yellow",
main = paste("Probability Density Function for", no_sim, "Simulations"))
# Total mean and sd of the aggregated samples
avg <- mean(meanValue)
s <- sd(meanValue)
# Average value from the data set
abline(v = avg , col = "red", lwd = 3, lty = 2)
# Expected value of an exponential distribution
abline(v = 5, col = "purple", lwd = 3, lty = 9)
# Theoretical normal distribution for the data set
x <- seq(min(meanValue), max(meanValue), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('purple', 'red', "grey"), bty='n', cex=.75)
sd(meanValue)
qqnorm(meanValue, col = "purple")
qqline(meanValue)
# For no_sim <- 100
no_sim <- 100
meanValue<- NULL; meanSD <- NULL
for (i in 1:no_sim){
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
meanValue <- c(meanValue, means)
meanSD <- c(meanSD, sds)
}
# 95% confidence interval for each simulation
upper <- meanValue +  1.96 * (meanSD/sqrt(n))
lower <- meanValue -  1.96 * (meanSD/sqrt(n))
sum(lower < 5 & 5 < upper)/no_sim * 100
index <- c(1:no_sim)
plot(index, upper, ylim = c(0, 10), type = "n", xlab = "Index", ylab = "Mean",
main = "Plot of confidence interval coverage for 100 simulations",col="purple")
segments(index, upper, index, lower, col = "purple", lwd = 3)
text(-8, 5, expression(paste("", mu, "")), cex = 1.5)
ablineclip(h=5, x1 = -2.5, lty = 2, col="red")
# Remove all current data in workspace:
rm(list=ls())
library(knitr)
knit2html(simulation.Rmd)
knit2html(simulation.Rmd)
setwd("C:/Users/elva.yan/Documents/Training/Coursera/Statistics/project")
knit2html(simulation.Rmd)
knit2html("simulation.Rmd")
# Remove all current data in workspace:
rm(list=ls())
library(ggplot2)
# data(ToothGrowth)
summary(ToothGrowth)
dose <- ToothGrowth$dose
supp <- ToothGrowth$supp
len <- ToothGrowth$len
# Load the ToothGrowth data and perform some basic exploratory data analyses
# Provide a basic summary of the data.
# Use confidence intervals and hypothesis tests to compare tooth growth by supp and dose.
# State your conclusions and the assumptions needed for your conclusions.
par(mfrow = c(1,2))
f1<-ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ supp)+
theme_classic()
f2<-ggplot(ToothGrowth, aes(x = factor(supp), y = len, fill = factor(supp)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ dose)+
theme_classic()
# calculate the mean and sd of each dosage and supplement
dosages_means <- aggregate(ToothGrowth$len, by = list(ToothGrowth$dose), FUN = mean)
dosages_sds <- aggregate(ToothGrowth$len, by = list(ToothGrowth$dose), FUN = sd)
Supplements_means <- aggregate(ToothGrowth$len, by = list(ToothGrowth$supp), FUN = mean)
Supplements_sds <- aggregate(ToothGrowth$len, by = list(ToothGrowth$supp), FUN = sd)
# split the data up by dosages
d0.5 <- subset(ToothGrowth, dose == 0.5)
d1.0 <- subset(ToothGrowth, dose == 1.0)
d2.0 <- subset(ToothGrowth, dose == 2.0)
# conduct a t test between supplements
test0.5 <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d0.5)
test0.5$p.value; test0.5$conf
test1.0 <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d1.0)
test1.0$p.value; test1.0$conf
test2.0 <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d2.0)
test2.0$p.value; test2.0$conf
par(mfrow=c(1,2))
p1 <-ggplot(ToothGrowth, aes(x=factor(dose),y =len,fill=factor(dose)))
p1 + geom_boxplot()+guides(fill=FALSE)+facet_grid(.~supp)
ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ supp)+
theme_classic()
ggplot(ToothGrowth, aes(x = factor(supp), y = len, fill = factor(supp)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ dose)+
theme_classic()
> par(mfrow=c(1,2))
> p1 <-ggplot(ToothGrowth, aes(x=factor(dose),y =len,fill=factor(dose)))
> p1 + geom_boxplot()+guides(fill=FALSE)+facet_grid(.~supp)
par(mfrow=c(1,2))
p1 <-ggplot(ToothGrowth, aes(x=factor(dose),y =len,fill=factor(dose)))
p1 + geom_boxplot()+guides(fill=FALSE)+facet_grid(.~supp)
str(ToothGrowth)
summary(ToothGrowth)
b1<-ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ supp)
b1
b1<-ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ supp)+
theme_classic()
b1
?ToothGrowth()
data(ToothGrowth)
summary(ToothGrowth)
dose <- ToothGrowth$dose
supp <- ToothGrowth$supp
len <- ToothGrowth$len
par(mfrow = c(1,2))
b1<-ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ supp)+
theme_classic()
b2<-ggplot(ToothGrowth, aes(x = factor(supp), y = len, fill = factor(supp)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ dose)+
theme_classic()
library(knitr)
knit2html(tooth.Rmd)
getwd()
knit2html("tooth.Rmd")
ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ supp)+
theme_classic()
ggplot(ToothGrowth, aes(x = factor(supp), y = len, fill = factor(supp)))+
geom_boxplot() +
guides(fill=FALSE) +
facet_grid(. ~ dose)+
theme_classic()
